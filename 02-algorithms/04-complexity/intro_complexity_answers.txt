1: Describe an analogy for relating an algorithm that has efficiency O(1) and another algorithm that has O(2n).

    An algorithm that has O(1) is a Ferrari and an algorithm that has O(2n) is a tricycle powered by 4 year old.

2: In plain English, what is the best case scenario for binary search?
    Omega(1). If the collection is already sorted then binary sort will go over it in one pass, just check that is is sorted, and be done.

3: In plain English, what is the worst-case scenario for binary search?
    O(log n). In the worst case binary sort will still take care of sorting the colection in pretty good time.  Even doubling the size of the collection won't double the amount of time it taked binary sort to put it in order, it's more likely it will only add one iteration to the total time.  That's efficient!

4: In plain English, what is the bounded-case scenario for binary search?
    Theta(log n).  The bounded case is the same as the worst case, which I think goes to prove how not awful even the worst case is. This is the expected running time in most cases of binary search, so it'll either be this slow or faster.

5: Create a graph using the data below. Here's a CSV with the values you'll need.
    graph.png

6: What is the limit of the function above as n approaches infinity?
    Just looking at the graph I would say 11.  The function really spikes upward fast, and the values get very unwieldy.

7: What is the Big-O of an algorithm that has the data points above?
    2^n

8: Write a Ruby method that takes a number n. This method must print the worst-case number of iterations for linear search to find an item in collections of size one to n. Use it to generate a table of worst-case iterations of collections up to size 10.
    def big_o_linear(n)
        (1..n).each do |i|
            puts i
        end
    end

    big_o_linear(10) #1, 2, 3, 4, 5, 6, 7, 8, 9, 10
    See linear.png

9: Create a graph from the output using Google Sheets or other graphing software. Analyze the graph and denote its Big-O somewhere on the graph.
    See bigO.png

10: What is the Big-O of binary search?
    log n 

11: What is the Big-Ω of binary search?
    1

12: What is the Big-Ө of binary search?
    log n