1: Print both Trees to the console and compare the difference between your Binary Search Tree and your Heap.

Output from Binary Search:
```
Indiana Jones and the Last Crusade: 87
Die Hard: With A Vengeance: 52
Star Wars: The Empire Strikes Back: 94
Gone In 60 Seconds: 24
Looper: 93
Who Framed Roger Rabbit: 96
The Royal Tanenbaums: 80
Ace Ventura: Pet Detective: 46
Harry Potter and the Prisoner of Azkaban: 91
[REC]: 88
Mad Max: Fury Road: 97
```
Output from Heap:
```
Gone In 60 Seconds: 24
Ace Ventura: Pet Detective: 46
Die Hard: With A Vengeance: 52
Indiana Jones and the Last Crusade: 87
[Rec]: 88
Who Framed Roger Rabbit: 96
The Royal Tanenbaums: 80
Star Wars: The Empire Strikes Back: 94
Harry Potter and the Prisoner of Azkaban: 91
Looper: 93
Mad Max: Fury Road: 97
```

2:Insert all numbers from 1 to 100000 into both Trees, then use Benchmark to compare performance: (My computer had some trouble with 100,000, so I used 10,000 for the sake of ease)

Binary Search Tree: 
Create 10000:  8.390000   0.010000   8.400000 (  8.410991)
Find 1, 5000, 10000: 0.000016,  0.001316,  0.002316
Delete 5000: 0.010000   0.000000   0.010000 (  0.002358)

Heap: 
Create 10000: 8.930000   0.130000   9.060000 (  9.081744)
Find 1, 5000, 10000: 0.000008,  0.003042,  0.003035
Delete 5000: 0.010000   0.000000   0.010000 (  0.005721)

-How much time does an average insertion consume in the Binary Search Tree compared to the Heap?
	The Heap is a little bit slower at inserting than Binary Search Tree, and that can get worse on a larger scale.

-How much time does finding 50000 in the Binary Search Tree consume compared to the Heap?
	Finding 5000 in the Binary Search Tree was almost 1/3 the time as the the Heap.
	
-How much time does the average deletion consume in a Binary Search Tree compared to the Heap?
	Deletion time for the Binary Search Tree was about half that of the Heap.

-When would you use a Binary Search Tree and why?
	The Binary Search Tree excels at finding elements in its database.  If the user intends to make a lot of queries this is the way to go.

-When would you use an Heap and why?
	I think the Heap would only be better at finding the minimum values in its database.  I could see it being useful for a database that are more concerned with be created initially and then displayed in some way, as supposed to be searched often.